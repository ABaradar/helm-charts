{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "Redis Helm Chart Values Schema",
  "description": "Schema for Redis Helm chart values",
  "properties": {
    "global": {
      "type": "object",
      "title": "Global Parameters",
      "description": "Global Docker image parameters",
      "properties": {
        "imageRegistry": {
          "type": "string",
          "title": "Global Docker Image Registry",
          "description": "Global Docker Image registry"
        },
        "imagePullSecrets": {
          "type": "array",
          "title": "Global Image Pull Secrets",
          "description": "Global Docker registry secret names as an array",
          "items": {
            "type": "string"
          }
        },
        "storageClass": {
          "type": "string",
          "title": "Global Storage Class",
          "description": "Global StorageClass for Persistent Volume(s)"
        }
      }
    },
    "kubeVersion": {
      "type": "string",
      "title": "Kubernetes Version Override",
      "description": "Override Kubernetes version"
    },
    "nameOverride": {
      "type": "string",
      "title": "Name Override",
      "description": "String to partially override redis.fullname"
    },
    "fullnameOverride": {
      "type": "string",
      "title": "Full Name Override",
      "description": "String to fully override redis.fullname"
    },
    "namespaceOverride": {
      "type": "string",
      "title": "Namespace Override",
      "description": "String to fully override common.names.namespace"
    },
    "commonLabels": {
      "type": "object",
      "title": "Common Labels",
      "description": "Labels to add to all deployed objects",
      "additionalProperties": {
        "type": "string"
      }
    },
    "commonAnnotations": {
      "type": "object",
      "title": "Common Annotations",
      "description": "Annotations to add to all deployed objects",
      "additionalProperties": {
        "type": "string"
      }
    },
    "image": {
      "type": "object",
      "title": "Redis Image Configuration",
      "description": "Redis Image parameters",
      "properties": {
        "registry": {
          "type": "string",
          "title": "Redis Image Registry",
          "description": "Redis image registry"
        },
        "repository": {
          "type": "string",
          "title": "Redis Image Repository",
          "description": "Redis image repository"
        },
        "tag": {
          "type": "string",
          "title": "Redis Image Tag",
          "description": "Redis image tag (immutable tags are recommended)"
        },
        "digest": {
          "type": "string",
          "title": "Redis Image Digest",
          "description": "Redis image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag"
        },
        "pullPolicy": {
          "type": "string",
          "title": "Redis Image Pull Policy",
          "description": "Redis image pull policy",
          "enum": ["Always", "Never", "IfNotPresent"]
        },
        "pullSecrets": {
          "type": "array",
          "title": "Redis Image Pull Secrets",
          "description": "Redis image pull secrets",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "auth": {
      "type": "object",
      "title": "Redis Authentication",
      "description": "Redis Configuration parameters",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Authentication",
          "description": "Enable password authentication"
        },
        "password": {
          "type": "string",
          "title": "Redis Password",
          "description": "Redis password"
        },
        "existingSecret": {
          "type": "string",
          "title": "Existing Secret",
          "description": "The name of an existing secret with Redis credentials"
        },
        "existingSecretPasswordKey": {
          "type": "string",
          "title": "Existing Secret Password Key",
          "description": "Password key to be retrieved from existing secret"
        },
        "usePasswordFiles": {
          "type": "boolean",
          "title": "Use Password Files",
          "description": "Mount credentials as files instead of using an environment variable"
        }
      }
    },
    "commonConfiguration": {
      "type": "string",
      "title": "Common Configuration",
      "description": "Redis common configuration to be added into the ConfigMap"
    },
    "master": {
      "type": "object",
      "title": "Redis Master Configuration",
      "description": "Redis master configuration parameters",
      "properties": {
        "count": {
          "type": "integer",
          "title": "Master Count",
          "description": "Number of Redis master instances to deploy (experimental, most use cases should use master.count=1)",
          "minimum": 1
        },
        "configuration": {
          "type": "string",
          "title": "Master Configuration",
          "description": "Configuration for Redis master nodes"
        },
        "disableCommands": {
          "type": "array",
          "title": "Disable Commands",
          "description": "Array with Redis commands to disable on master nodes",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "type": "array",
          "title": "Container Command",
          "description": "Override default container command (useful when using custom images)",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "type": "array",
          "title": "Container Args",
          "description": "Override default container args (useful when using custom images)",
          "items": {
            "type": "string"
          }
        },
        "enableServiceLinks": {
          "type": "boolean",
          "title": "Enable Service Links",
          "description": "Whether information about services should be injected into pod's environment variable"
        },
        "preExecCmds": {
          "type": "array",
          "title": "Pre-Exec Commands",
          "description": "Additional commands to run prior to starting Redis master",
          "items": {
            "type": "string"
          }
        },
        "extraFlags": {
          "type": "array",
          "title": "Extra Flags",
          "description": "Array with additional command line flags for Redis master",
          "items": {
            "type": "string"
          }
        },
        "extraEnvVars": {
          "type": "array",
          "title": "Extra Environment Variables",
          "description": "Array with extra environment variables to add to Redis master nodes",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": ["name"]
          }
        },
        "extraEnvVarsCM": {
          "type": "string",
          "title": "Extra Environment Variables ConfigMap",
          "description": "Name of existing ConfigMap containing extra env vars for Redis master nodes"
        },
        "extraEnvVarsSecret": {
          "type": "string",
          "title": "Extra Environment Variables Secret",
          "description": "Name of existing Secret containing extra env vars for Redis master nodes"
        },
        "containerPorts": {
          "type": "object",
          "title": "Container Ports",
          "description": "Container port configuration",
          "properties": {
            "redis": {
              "type": "integer",
              "title": "Redis Port",
              "description": "Container port to open on Redis master nodes",
              "minimum": 1,
              "maximum": 65535
            }
          }
        },
        "startupProbe": {
          "type": "object",
          "title": "Startup Probe",
          "description": "Startup probe configuration for Redis master nodes",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Enable Startup Probe",
              "description": "Enable startupProbe on Redis master nodes"
            },
            "initialDelaySeconds": {
              "type": "integer",
              "title": "Initial Delay Seconds",
              "description": "Initial delay seconds for startupProbe",
              "minimum": 0
            },
            "periodSeconds": {
              "type": "integer",
              "title": "Period Seconds",
              "description": "Period seconds for startupProbe",
              "minimum": 1
            },
            "timeoutSeconds": {
              "type": "integer",
              "title": "Timeout Seconds",
              "description": "Timeout seconds for startupProbe",
              "minimum": 1
            },
            "successThreshold": {
              "type": "integer",
              "title": "Success Threshold",
              "description": "Success threshold for startupProbe",
              "minimum": 1
            },
            "failureThreshold": {
              "type": "integer",
              "title": "Failure Threshold",
              "description": "Failure threshold for startupProbe",
              "minimum": 1
            }
          }
        },
        "livenessProbe": {
          "type": "object",
          "title": "Liveness Probe",
          "description": "Liveness probe configuration for Redis master nodes",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Enable Liveness Probe",
              "description": "Enable livenessProbe on Redis master nodes"
            },
            "initialDelaySeconds": {
              "type": "integer",
              "title": "Initial Delay Seconds",
              "description": "Initial delay seconds for livenessProbe",
              "minimum": 0
            },
            "periodSeconds": {
              "type": "integer",
              "title": "Period Seconds",
              "description": "Period seconds for livenessProbe",
              "minimum": 1
            },
            "timeoutSeconds": {
              "type": "integer",
              "title": "Timeout Seconds",
              "description": "Timeout seconds for livenessProbe",
              "minimum": 1
            },
            "successThreshold": {
              "type": "integer",
              "title": "Success Threshold",
              "description": "Success threshold for livenessProbe",
              "minimum": 1
            },
            "failureThreshold": {
              "type": "integer",
              "title": "Failure Threshold",
              "description": "Failure threshold for livenessProbe",
              "minimum": 1
            }
          }
        },
        "readinessProbe": {
          "type": "object",
          "title": "Readiness Probe",
          "description": "Readiness probe configuration for Redis master nodes",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Enable Readiness Probe",
              "description": "Enable readinessProbe on Redis master nodes"
            },
            "initialDelaySeconds": {
              "type": "integer",
              "title": "Initial Delay Seconds",
              "description": "Initial delay seconds for readinessProbe",
              "minimum": 0
            },
            "periodSeconds": {
              "type": "integer",
              "title": "Period Seconds",
              "description": "Period seconds for readinessProbe",
              "minimum": 1
            },
            "timeoutSeconds": {
              "type": "integer",
              "title": "Timeout Seconds",
              "description": "Timeout seconds for readinessProbe",
              "minimum": 1
            },
            "successThreshold": {
              "type": "integer",
              "title": "Success Threshold",
              "description": "Success threshold for readinessProbe",
              "minimum": 1
            },
            "failureThreshold": {
              "type": "integer",
              "title": "Failure Threshold",
              "description": "Failure threshold for readinessProbe",
              "minimum": 1
            }
          }
        },
        "customStartupProbe": {
          "type": "object",
          "title": "Custom Startup Probe",
          "description": "Custom startupProbe that overrides the default one"
        },
        "customLivenessProbe": {
          "type": "object",
          "title": "Custom Liveness Probe",
          "description": "Custom livenessProbe that overrides the default one"
        },
        "customReadinessProbe": {
          "type": "object",
          "title": "Custom Readiness Probe",
          "description": "Custom readinessProbe that overrides the default one"
        },
        "resources": {
          "type": "object",
          "title": "Resource Configuration",
          "description": "Redis master resource requests and limits",
          "properties": {
            "limits": {
              "type": "object",
              "title": "Resource Limits",
              "description": "The resources limits for the Redis master containers",
              "properties": {
                "cpu": {
                  "oneOf": [
                    {"type": "string"},
                    {"type": "number"}
                  ],
                  "title": "CPU Limit",
                  "description": "CPU resource limit"
                },
                "memory": {
                  "type": "string",
                  "title": "Memory Limit",
                  "description": "Memory resource limit"
                }
              }
            },
            "requests": {
              "type": "object",
              "title": "Resource Requests",
              "description": "The requested resources for the Redis master containers",
              "properties": {
                "cpu": {
                  "oneOf": [
                    {"type": "string"},
                    {"type": "number"}
                  ],
                  "title": "CPU Request",
                  "description": "CPU resource request"
                },
                "memory": {
                  "type": "string",
                  "title": "Memory Request",
                  "description": "Memory resource request"
                }
              }
            }
          }
        },
        "podSecurityContext": {
          "type": "object",
          "title": "Pod Security Context",
          "description": "Configure Pods Security Context",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Enable Pod Security Context",
              "description": "Enabled Redis master pods' Security Context"
            },
            "fsGroup": {
              "type": "integer",
              "title": "FS Group",
              "description": "Set Redis master pod's Security Context fsGroup",
              "minimum": 0
            }
          }
        },
        "containerSecurityContext": {
          "type": "object",
          "title": "Container Security Context",
          "description": "Configure Container Security Context",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Enable Container Security Context",
              "description": "Enabled Redis master containers' Security Context"
            },
            "runAsUser": {
              "type": "integer",
              "title": "Run As User",
              "description": "Set Redis master containers' Security Context runAsUser",
              "minimum": 0
            },
            "runAsNonRoot": {
              "type": "boolean",
              "title": "Run As Non-Root",
              "description": "Set Redis master containers' Security Context runAsNonRoot"
            }
          }
        },
        "kind": {
          "type": "string",
          "title": "Workload Kind",
          "description": "Use either Deployment or StatefulSet (default)",
          "enum": ["Deployment", "StatefulSet"]
        },
        "schedulerName": {
          "type": "string",
          "title": "Scheduler Name",
          "description": "Alternate scheduler for Redis master pods"
        },
        "updateStrategy": {
          "type": "object",
          "title": "Update Strategy",
          "description": "Redis master statefulset strategy type",
          "properties": {
            "type": {
              "type": "string",
              "title": "Strategy Type",
              "description": "StrategyType - Can be set to RollingUpdate or OnDelete",
              "enum": ["RollingUpdate", "OnDelete"]
            }
          }
        },
        "priorityClassName": {
          "type": "string",
          "title": "Priority Class Name",
          "description": "Redis master pods' priorityClassName"
        },
        "hostAliases": {
          "type": "array",
          "title": "Host Aliases",
          "description": "Redis master pods host aliases",
          "items": {
            "type": "object"
          }
        },
        "podLabels": {
          "type": "object",
          "title": "Pod Labels",
          "description": "Extra labels for Redis master pods",
          "additionalProperties": {
            "type": "string"
          }
        },
        "podAnnotations": {
          "type": "object",
          "title": "Pod Annotations",
          "description": "Annotations for Redis master pods",
          "additionalProperties": {
            "type": "string"
          }
        },
        "shareProcessNamespace": {
          "type": "boolean",
          "title": "Share Process Namespace",
          "description": "Share a single process namespace between all of the containers in Redis master pods"
        },
        "podAffinityPreset": {
          "type": "string",
          "title": "Pod Affinity Preset",
          "description": "Pod affinity preset. Ignored if master.affinity is set. Allowed values: soft or hard",
          "enum": ["", "soft", "hard"]
        },
        "podAntiAffinityPreset": {
          "type": "string",
          "title": "Pod Anti-Affinity Preset",
          "description": "Pod anti-affinity preset. Ignored if master.affinity is set. Allowed values: soft or hard",
          "enum": ["", "soft", "hard"]
        },
        "nodeAffinityPreset": {
          "type": "object",
          "title": "Node Affinity Preset",
          "description": "Node affinity preset configuration",
          "properties": {
            "type": {
              "type": "string",
              "title": "Node Affinity Type",
              "description": "Node affinity preset type. Ignored if master.affinity is set. Allowed values: soft or hard",
              "enum": ["", "soft", "hard"]
            },
            "key": {
              "type": "string",
              "title": "Node Affinity Key",
              "description": "Node label key to match. Ignored if master.affinity is set"
            },
            "values": {
              "type": "array",
              "title": "Node Affinity Values",
              "description": "Node label values to match. Ignored if master.affinity is set",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "affinity": {
          "type": "object",
          "title": "Affinity Configuration",
          "description": "Affinity for Redis master pods assignment"
        },
        "nodeSelector": {
          "type": "object",
          "title": "Node Selector",
          "description": "Node labels for Redis master pods assignment",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tolerations": {
          "type": "array",
          "title": "Tolerations",
          "description": "Tolerations for Redis master pods assignment",
          "items": {
            "type": "object"
          }
        },
        "topologySpreadConstraints": {
          "type": "array",
          "title": "Topology Spread Constraints",
          "description": "Spread Constraints for Redis master pod assignment",
          "items": {
            "type": "object"
          }
        },
        "dnsPolicy": {
          "type": "string",
          "title": "DNS Policy",
          "description": "DNS Policy for Redis master pod"
        },
        "dnsConfig": {
          "type": "object",
          "title": "DNS Config",
          "description": "DNS Configuration for Redis master pod"
        },
        "lifecycleHooks": {
          "type": "object",
          "title": "Lifecycle Hooks",
          "description": "for the Redis master container(s) to automate configuration before or after startup"
        },
        "extraVolumes": {
          "type": "array",
          "title": "Extra Volumes",
          "description": "Optionally specify extra list of additional volumes for the Redis master pod(s)",
          "items": {
            "type": "object"
          }
        },
        "extraVolumeMounts": {
          "type": "array",
          "title": "Extra Volume Mounts",
          "description": "Optionally specify extra list of additional volumeMounts for the Redis master container(s)",
          "items": {
            "type": "object"
          }
        },
        "sidecars": {
          "type": "array",
          "title": "Sidecars",
          "description": "Add additional sidecar containers to the Redis master pod(s)",
          "items": {
            "type": "object"
          }
        },
        "initContainers": {
          "type": "array",
          "title": "Init Containers",
          "description": "Add additional init containers to the Redis master pod(s)",
          "items": {
            "type": "object"
          }
        },
        "persistence": {
          "type": "object",
          "title": "Persistence Configuration",
          "description": "Persistence configuration",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Enable Persistence",
              "description": "Enable persistence on Redis master nodes using Persistent Volume Claims"
            },
            "medium": {
              "type": "string",
              "title": "Medium",
              "description": "Provide a medium for emptyDir volumes"
            },
            "sizeLimit": {
              "type": "string",
              "title": "Size Limit",
              "description": "Set this to enable a size limit for emptyDir volumes"
            },
            "path": {
              "type": "string",
              "title": "Volume Path",
              "description": "The path the volume will be mounted at on Redis master containers"
            },
            "subPath": {
              "type": "string",
              "title": "Sub Path",
              "description": "The subdirectory of the volume to mount on Redis master containers"
            },
            "subPathExpr": {
              "type": "string",
              "title": "Sub Path Expression",
              "description": "Used to construct the subPath subdirectory of the volume to mount on Redis master containers"
            },
            "storageClass": {
              "type": "string",
              "title": "Storage Class",
              "description": "Persistent Volume storage class"
            },
            "accessModes": {
              "type": "array",
              "title": "Access Modes",
              "description": "Persistent Volume access modes",
              "items": {
                "type": "string",
                "enum": ["ReadWriteOnce", "ReadOnlyMany", "ReadWriteMany", "ReadWriteOncePod"]
              }
            },
            "size": {
              "type": "string",
              "title": "Storage Size",
              "description": "Persistent Volume size",
              "pattern": "^\\d+(Ei|Pi|Ti|Gi|Mi|Ki|E|P|T|G|M|K)?$"
            },
            "annotations": {
              "type": "object",
              "title": "PVC Annotations",
              "description": "Additional custom annotations for the PVC",
              "additionalProperties": {
                "type": "string"
              }
            },
            "selector": {
              "type": "object",
              "title": "PVC Selector",
              "description": "Additional labels to match for the PVC"
            },
            "dataSource": {
              "type": "object",
              "title": "Data Source",
              "description": "Custom PVC data source"
            },
            "existingClaim": {
              "type": "string",
              "title": "Existing Claim",
              "description": "Use a existing PVC which must be created manually before bound"
            }
          }
        }
      }
    },
    "service": {
      "type": "object",
      "title": "Service Configuration",
      "description": "Redis Service parameters",
      "properties": {
        "type": {
          "type": "string",
          "title": "Service Type",
          "description": "Redis service type",
          "enum": ["ClusterIP", "NodePort", "LoadBalancer", "ExternalName"]
        },
        "ports": {
          "type": "object",
          "title": "Service Ports",
          "description": "Redis service port configuration",
          "properties": {
            "redis": {
              "type": "integer",
              "title": "Redis Service Port",
              "description": "Redis service port",
              "minimum": 1,
              "maximum": 65535
            }
          }
        },
        "nodePorts": {
          "type": "object",
          "title": "Node Ports",
          "description": "Node port configuration",
          "properties": {
            "redis": {
              "type": "string",
              "title": "Redis Node Port",
              "description": "Node port for Redis"
            }
          }
        },
        "externalTrafficPolicy": {
          "type": "string",
          "title": "External Traffic Policy",
          "description": "Redis service external traffic policy",
          "enum": ["Cluster", "Local"]
        },
        "extraPorts": {
          "type": "array",
          "title": "Extra Ports",
          "description": "Extra ports to expose (normally used with the sidecar value)",
          "items": {
            "type": "object"
          }
        },
        "internalTrafficPolicy": {
          "type": "string",
          "title": "Internal Traffic Policy",
          "description": "Redis service internal traffic policy (requires Kubernetes v1.22 or greater to be usable)",
          "enum": ["Cluster", "Local"]
        },
        "clusterIP": {
          "type": "string",
          "title": "Cluster IP",
          "description": "Redis service Cluster IP"
        },
        "loadBalancerIP": {
          "type": "string",
          "title": "Load Balancer IP",
          "description": "Redis service Load Balancer IP"
        },
        "loadBalancerSourceRanges": {
          "type": "array",
          "title": "Load Balancer Source Ranges",
          "description": "Redis service Load Balancer sources",
          "items": {
            "type": "string"
          }
        },
        "annotations": {
          "type": "object",
          "title": "Service Annotations",
          "description": "Additional custom annotations for Redis service",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sessionAffinity": {
          "type": "string",
          "title": "Session Affinity",
          "description": "Control where client requests go, to the same pod or round-robin",
          "enum": ["None", "ClientIP"]
        },
        "sessionAffinityConfig": {
          "type": "object",
          "title": "Session Affinity Config",
          "description": "Additional settings for the sessionAffinity"
        }
      }
    },
    "networkPolicy": {
      "type": "object",
      "title": "Network Policy Configuration",
      "description": "Network Policy parameters",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Network Policy",
          "description": "Enable creation of NetworkPolicy resources"
        },
        "allowExternal": {
          "type": "boolean",
          "title": "Allow External",
          "description": "The Policy model to apply"
        },
        "extraIngress": {
          "type": "array",
          "title": "Extra Ingress Rules",
          "description": "Add extra ingress rules to the NetworkPolicy",
          "items": {
            "type": "object"
          }
        },
        "extraEgress": {
          "type": "array",
          "title": "Extra Egress Rules",
          "description": "Add extra egress rules to the NetworkPolicy",
          "items": {
            "type": "object"
          }
        },
        "ingressNSMatchLabels": {
          "type": "object",
          "title": "Ingress Namespace Match Labels",
          "description": "Labels to match to allow traffic from other namespaces",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ingressNSPodMatchLabels": {
          "type": "object",
          "title": "Ingress Namespace Pod Match Labels",
          "description": "Pod labels to match to allow traffic from other namespaces",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ingress": {
      "type": "object",
      "title": "Ingress Configuration",
      "description": "Redis Ingress parameters",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Ingress",
          "description": "Enable ingress record generation for Redis"
        },
        "pathType": {
          "type": "string",
          "title": "Path Type",
          "description": "Ingress path type",
          "enum": ["Exact", "Prefix", "ImplementationSpecific"]
        },
        "apiVersion": {
          "type": "string",
          "title": "API Version",
          "description": "Force Ingress API version (automatically detected if not set)"
        },
        "hostname": {
          "type": "string",
          "title": "Hostname",
          "description": "Default host for the ingress record"
        },
        "ingressClassName": {
          "type": "string",
          "title": "Ingress Class Name",
          "description": "IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)"
        },
        "path": {
          "type": "string",
          "title": "Path",
          "description": "Default path for the ingress record"
        },
        "annotations": {
          "type": "object",
          "title": "Ingress Annotations",
          "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tls": {
          "type": "boolean",
          "title": "Enable TLS",
          "description": "Enable TLS configuration for the host defined at ingress.hostname parameter"
        },
        "selfSigned": {
          "type": "boolean",
          "title": "Self-Signed Certificate",
          "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm"
        },
        "extraHosts": {
          "type": "array",
          "title": "Extra Hosts",
          "description": "An array with additional hostname(s) to be covered with the ingress record",
          "items": {
            "type": "object"
          }
        },
        "extraPaths": {
          "type": "array",
          "title": "Extra Paths",
          "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
          "items": {
            "type": "object"
          }
        },
        "extraTls": {
          "type": "array",
          "title": "Extra TLS",
          "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
          "items": {
            "type": "object"
          }
        },
        "secrets": {
          "type": "array",
          "title": "TLS Secrets",
          "description": "Custom TLS certificates as secrets",
          "items": {
            "type": "object"
          }
        },
        "extraRules": {
          "type": "array",
          "title": "Extra Rules",
          "description": "Additional rules to be covered with this ingress record",
          "items": {
            "type": "object"
          }
        }
      }
    }
  }
}