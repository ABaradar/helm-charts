apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- include "postgres.annotations" . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "postgres.fullname" . }}-headless
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if not .Values.auth.existingSecret }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- include "postgres.annotations" . | nindent 8 }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "postgres.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "postgres.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            # Default PostgreSQL environment variables
            - name: PGDATA
              value: {{ include "postgres.dataDir" . }}/pgdata
            {{- if .Values.auth.enablePostgresUser }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.secretName" . }}
                  key: {{ include "postgres.adminPasswordKey" . }}
            {{- end }}
            {{- if eq (include "postgres.createUser" .) "true" }}
            - name: POSTGRES_USER
              value: {{ .Values.auth.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.secretName" . }}
                  key: {{ include "postgres.userPasswordKey" . }}
            - name: POSTGRES_DB
              value: {{ .Values.auth.database | quote }}
            {{- end }}
            # PostgreSQL configuration
            {{- if .Values.config.postgresqlMaxConnections }}
            - name: POSTGRES_MAX_CONNECTIONS
              value: {{ .Values.config.postgresqlMaxConnections | quote }}
            {{- end }}
            {{- if .Values.config.postgresqlSharedBuffers }}
            - name: POSTGRES_SHARED_BUFFERS
              value: {{ .Values.config.postgresqlSharedBuffers | quote }}
            {{- end }}
            {{- if .Values.config.postgresqlEffectiveCacheSize }}
            - name: POSTGRES_EFFECTIVE_CACHE_SIZE
              value: {{ .Values.config.postgresqlEffectiveCacheSize | quote }}
            {{- end }}
          ports:
            - name: postgresql
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  pg_isready -U {{ include "postgres.username" . }} -d {{ include "postgres.database" . }} -h 127.0.0.1 -p {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  pg_isready -U {{ include "postgres.username" . }} -d {{ include "postgres.database" . }} -h 127.0.0.1 -p {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  pg_isready -U {{ include "postgres.username" . }} -d {{ include "postgres.database" . }} -h 127.0.0.1 -p {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: {{ include "postgres.dataDir" . }}
            {{- if not .Values.config.existingConfigmap }}
            - name: config
              mountPath: {{ include "postgres.configDir" . }}
            {{- end }}
            - name: run
              mountPath: {{ include "postgres.runDir" . }}
            - name: tmp
              mountPath: /tmp
      volumes:
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        {{- if not .Values.config.existingConfigmap }}
        - name: config
          configMap:
            name: {{ include "postgres.configmapName" . }}
            optional: true
        {{- end }}
        - name: run
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
      {{- with .Values.persistence.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      accessModes:
        {{- range .Values.persistence.accessModes }}
        - {{ . | quote }}
        {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
      {{- end }}
  {{- end }}