apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "rabbitmq.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "rabbitmq.labels" . | nindent 4 }}
  {{- with (include "rabbitmq.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "rabbitmq.fullname" . }}
  {{- if .Values.clustering.enabled }}
  replicas: {{ .Values.clustering.replicaCount }}
  {{- else }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "rabbitmq.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "rabbitmq.selectorLabels" . | nindent 8 }}
    spec:
{{- with (include "rabbitmq.imagePullSecrets" .) }}
{{ . | nindent 6 }}
{{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: {{ include "rabbitmq.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.image) }}
          ports:
            - name: amqp
              containerPort: 5672
              protocol: TCP
            - name: management
              containerPort: 15672
              protocol: TCP
            - name: epmd
              containerPort: 4369
              protocol: TCP
            - name: dist
              containerPort: 25672
              protocol: TCP
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
            {{- end }}
          {{- if or .Values.auth.enabled .Values.clustering.enabled .Values.extraEnv }}
          env:
            {{- if .Values.auth.enabled }}
            - name: RABBITMQ_DEFAULT_USER
              value: {{ .Values.auth.username | quote }}
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "rabbitmq.secretName" . }}
                  key: {{ include "rabbitmq.secretPasswordKey" . }}
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: {{ include "rabbitmq.secretName" . }}
                  key: {{ include "rabbitmq.secretErlangCookieKey" . }}
            {{- end }}
            {{- if .Values.clustering.enabled }}
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_NODENAME
              value: {{ include "rabbitmq.nodeName" . | quote }}
            - name: K8S_SERVICE_NAME
              value: {{ include "rabbitmq.fullname" . }}
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: "-rabbit log_levels [{connection,info},{default,info}] -rabbit loopback_users []"
            {{- end }}
            {{- range .Values.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.auth.enabled }}
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    # Wait for RabbitMQ to be ready
                    timeout 60 bash -c 'until rabbitmqctl status >/dev/null 2>&1; do sleep 2; done'
                    # Ensure admin user has correct password
                    rabbitmqctl change_password {{ .Values.auth.username }} "${RABBITMQ_DEFAULT_PASS}" || true
          {{- end }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq
            - name: config
              mountPath: /etc/rabbitmq
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
      volumes:
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        - name: config
          configMap:
            name: {{ include "rabbitmq.fullname" . }}-config
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- end }}