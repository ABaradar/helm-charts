stages:
  - release
  - sign

variables:
  CHART_REPO_PREFIX: cloudpirates
  REGISTRY: $DOCKER_REGISTRY
  REGISTRY_USER: $DOCKER_USER
  REGISTRY_PASSWORD: $DOCKER_PASSWORD

release-charts:
  stage: release
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache git yq
    - helm registry login --username ${REGISTRY_USER} --password ${REGISTRY_PASSWORD} ${REGISTRY}
  script:
    - |
      echo "Detecting changed charts..."
      
      # Get list of changed files in the last commit
      CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || git ls-files charts/)
      echo "Changed files: $CHANGED_FILES"
      
      # Find unique chart directories that have changes
      CHANGED_CHARTS=""
      for file in $CHANGED_FILES; do
        if [[ "$file" == charts/* ]]; then
          CHART_DIR=$(echo "$file" | cut -d'/' -f1-2)
          if [[ -f "$CHART_DIR/Chart.yaml" ]]; then
            CHANGED_CHARTS="$CHANGED_CHARTS $CHART_DIR"
          fi
        fi
      done
      
      # Remove duplicates
      CHANGED_CHARTS=$(echo "$CHANGED_CHARTS" | tr ' ' '\n' | sort -u | tr '\n' ' ')
      
      echo "Changed charts: $CHANGED_CHARTS"
      
      # Process each changed chart
      RELEASED_CHARTS=""
      for chart_path in $CHANGED_CHARTS; do
        if [[ -n "$chart_path" && -f "$chart_path/Chart.yaml" ]]; then
          chart_name=$(basename "$chart_path")
          
          echo "Processing chart: $chart_name at $chart_path"
          cd "$chart_path"
          
          # Extract version and appVersion from Chart.yaml
          CHART_VERSION=$(yq eval '.version' Chart.yaml)
          APP_VERSION=$(yq eval '.appVersion' Chart.yaml)
          
          echo "Chart: $chart_name, Version: $CHART_VERSION, App Version: $APP_VERSION"
          
          # Update dependencies if Chart.yaml contains dependencies
          if grep -q "dependencies:" Chart.yaml; then
            echo "Updating dependencies for $chart_name"
            helm dependency update
          fi
          
          # Package the chart
          echo "Packaging Helm chart $chart_name version $CHART_VERSION"
          helm package . --version=$CHART_VERSION --app-version=$APP_VERSION
          
          # Push the chart to dynamic repository
          CHART_REPO="${CHART_REPO_PREFIX}"
          echo "Pushing Helm chart $chart_name-$CHART_VERSION.tgz to oci://$REGISTRY/$CHART_REPO"
          
          if helm push ${chart_name}-${CHART_VERSION}.tgz oci://${REGISTRY}/${CHART_REPO} 2>&1 | tee $CI_PROJECT_DIR/${chart_name}-output.log; then
            # Extract digest for signing
            DIGEST=$(cat $CI_PROJECT_DIR/${chart_name}-output.log | awk -F '[, ]+' '/Digest/{print $NF}')
            echo "${chart_name}_VERSION=$CHART_VERSION" >> $CI_PROJECT_DIR/digest.env
            echo "${chart_name}_DIGEST=$DIGEST" >> $CI_PROJECT_DIR/digest.env
            
            RELEASED_CHARTS="$RELEASED_CHARTS $chart_name"
            echo "Successfully released $chart_name:$CHART_VERSION"
          else
            echo "Failed to push $chart_name:$CHART_VERSION"
            cat $CI_PROJECT_DIR/${chart_name}-output.log
            exit 1
          fi
          
          cd - > /dev/null
        fi
      done
      
      echo "RELEASED_CHARTS=$RELEASED_CHARTS" >> $CI_PROJECT_DIR/digest.env
      
      if [[ -z "$RELEASED_CHARTS" ]]; then
        echo "No charts were released"
      else
        echo "Released charts: $RELEASED_CHARTS"
      fi
  artifacts:
    expire_in: 24h
    reports:
      dotenv: digest.env
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - charts/**/*

sign-charts:
  stage: sign
  image: harbor.cloudpirates.io/public/cosign:v2.4.2@sha256:4731b7f62d0a98236769dbb6f97543a66e25e46d5a35d46111248e7c0d628230
  variables:
    GIT_STRATEGY: none
  before_script:
    - mkdir -p ~/.docker
    - echo "{\"auths\":{\"$REGISTRY\":{\"username\":\"$REGISTRY_USER\",\"password\":\"$REGISTRY_PASSWORD\"}}}" > ~/.docker/config.json
  script:
    - |
      if [[ -z "$RELEASED_CHARTS" ]]; then
        echo "No charts were released, nothing to sign"
        exit 0
      fi
      
      echo "Signing charts: $RELEASED_CHARTS"
      for chart_name in $RELEASED_CHARTS; do
        VERSION_VAR="${chart_name}_VERSION"
        DIGEST_VAR="${chart_name}_DIGEST"
        
        CHART_VERSION=$(eval echo \$$VERSION_VAR)
        DIGEST=$(eval echo \$$DIGEST_VAR)
        
        if [[ -n "$DIGEST" && -n "$CHART_VERSION" ]]; then
          CHART_REPO="${CHART_REPO_PREFIX}"
          echo "Signing chart: $chart_name:$CHART_VERSION with digest: $DIGEST"
          cosign sign --key env://COSIGN_KEY --tlog-upload=false ${REGISTRY}/${CHART_REPO}/${chart_name}:${CHART_VERSION}@$DIGEST
        else
          echo "Missing version or digest for chart: $chart_name (version: $CHART_VERSION, digest: $DIGEST)"
        fi
      done
  needs:
    - release-charts
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - charts/**/*